require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const session = require("express-session");
const authMiddleware = require("./middleware/authMiddleware");
const cron = require("node-cron");
const Task = require("./models/Task");
const { sendReminderEmail } = require("./services/emailRemaider");

const app = express();
const PORT = process.env.PORT || 5000;

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Å—ñ—ó
app.use(
    session({
        secret: "your_secret_key",
        resave: false,
        saveUninitialized: true,
        cookie: { secure: false },
    })
);

// Middleware –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ JSON
app.use(express.json());

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö MongoDB
mongoose
    .connect("mongodb://localhost:27017/todo-app", {
        useNewUrlParser: true,
        useUnifiedTopology: true,
    })
    .then(() => console.log("–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±–∞–∑–∏ MongoDB"))
    .catch((err) => console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ –¥–æ –±–∞–∑–∏", err));

const taskRoutes = require("./routes/taskRoutes"); // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ–∞–π–ª –∑ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
app.use("/tasks", taskRoutes);

const userRoutes = require("./routes/userRoutes");
app.use("/users", userRoutes);

const path = require("path");
app.use(express.static(path.join(__dirname, "public")));

// –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
app.get("/", (req, res) => {
    res.send("TODO List API –ø—Ä–∞—Ü—é—î! üöÄ");
});

// –ó–∞—Ö–∏—â–µ–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è index.html
app.get("/index.html", authMiddleware, (req, res) => {
    res.sendFile(path.join(__dirname, "public", "index.html"));
});

// –ó–∞—Ö–∏—â–µ–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è Dashboard.html
app.get("/Dashboard.html", authMiddleware, (req, res) => {
    res.sendFile(path.join(__dirname, "public", "Dashboard.html"));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Ç—ñ–ª—å–∫–∏ –≤ —Ä–µ–∂–∏–º—ñ, –∫–æ–ª–∏ –Ω–µ —Ç–µ—Å—Ç—É—î–º–æ
if (process.env.NODE_ENV !== "test") {
    app.listen(PORT, () => {
        console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${PORT}`);
    });
}

//–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –µ–º–µ–π–ª–∞ –ø—Ä–æ –∑–∞–¥–∞—á—ñ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ emailRemaider.js
cron.schedule("42 11 * * *", async () => {
    try {
        console.log("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–¥–∞—á –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ...");

        const today = new Date().toISOString().split("T")[0];
        console.log(`–ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞: ${today}`);

        const tasksForToday = await Task.find({
            dueDate: today,
        });

        console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: ${tasksForToday.length}`);

        if (tasksForToday.length > 0) {
            tasksForToday.forEach((task) => {
                sendReminderEmail(task);
            });
        } else {
            console.log("–ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î –∑–∞–¥–∞—á.");
        }
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∑–∞–¥–∞—á: ", error);
    }
});

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
module.exports = app;
